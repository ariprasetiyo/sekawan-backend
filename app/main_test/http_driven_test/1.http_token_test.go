package httpdriventest

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"sekawan-backend/app/main/enum"
	"sekawan-backend/app/main/handlerAuth"
	"sekawan-backend/app/main/util"
	"strconv"
	"strings"
	"testing"
	"time"

	"github.com/google/uuid"
	"github.com/joho/godotenv"
)

/*
1. clientId = generated by system. look at to table auth_api_client in column client_id and client_key
2. clientKey = generated by system. look at to table auth_api_client in column client_id and client_key
3. clientKeyPattern = os.Getenv(util.CONFIG_APP_API_CLIENT_KEY_PATTERN)
*/
const (
	clientId         = "ari_aprasetiyo_client_id_1234"
	clientKey        = "Hfxp$kK1o4z=$W+U_Se0rEasGk2E_Rt6sH7xCR7rf4-E7Ilm6nizei+OtEOsKyPbZk4kn+r4NagzeI3kOKWhMximK!KUVb6Pdun8"
	clientKeyPattern = "::-::"
)

func TestHttpGetToken(t *testing.T) {
	GetTokenHttp()
}

/*
client requirements
1. phoneNo = generated by request. see on table auth_users
2. password = generated by request. see on table auth_users
3. clientId = generated by system ( look at to table auth_api_client in column client_id and clientId )
4. clientKey = generated by system ( look at to table auth_api_client in column client_key )
5. clientKeyPattern = static
*/
func GetTokenHttp() string {

	godotenv.Load()
	err := godotenv.Load(filepath.Join("../../../", ".env.example"))

	//build req data
	secretKeySHA256 := clientId + clientKeyPattern + clientKey
	encryptionKey := os.Getenv(util.CONFIG_APP_ENCRIPTION_KEY)

	phoneNo := "+6285600070411"
	password := "cobacoba1-="

	authCredRequest := handlerAuth.AuthCredRequest{PhoneNo: phoneNo, Password: password}
	authCredRequestInJson, err := json.Marshal(authCredRequest)
	util.IsErrorDoPrint(err)
	encryptionCredential := util.EncryptAES256(encryptionKey, string(authCredRequestInJson))
	requestId := uuid.New().String()
	requestTime := time.Now().UnixMilli()

	var bodyRequest = "{\"requestId\":\"" + requestId + "\",\"type\":\"" + enum.TYPE_GENERATE_TOKEN.String() + "\",\"requestTime\":" + strconv.FormatInt(requestTime, 10) + ",\"body\":{\"cred\":\"" + encryptionCredential + "\"}}"
	signature := util.HmacSha256(secretKeySHA256, bodyRequest)

	//http req
	client := &http.Client{}
	var data = strings.NewReader(bodyRequest)
	req, err := http.NewRequest("POST", "http://localhost:8083/public/token", data)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Msg-Id", requestId)
	req.Header.Set("Client-Id", clientId)
	req.Header.Set("Signature", signature)
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	bodyText, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%s\n", bodyText)
	tokenResponse := handlerAuth.AuthResponse{}
	err = json.Unmarshal(bodyText, &tokenResponse)
	if err != nil {
		log.Fatal(err)
	}
	return tokenResponse.Body.Token
}
