package unittest

import (
	"math/rand"
	"os"
	"path/filepath"
	"sekawan-backend/app/main/handlerAuth"
	"sekawan-backend/app/main/util"
	"strconv"
	"testing"
	"time"

	"github.com/joho/godotenv"
)

/*
password_hash = salt + user_id + password
*/
func TestGenerateUserAndPassword(t *testing.T) {
	godotenv.Load()
	err := godotenv.Load(filepath.Join("../../", ".env.example"))
	util.IsErrorDoPrint(err)

	salt := os.Getenv(util.CONFIG_APP_SALT_MD5)
	//userId := generateUserId(20). generated by BE
	userId := "8ARSgYr1ofFRGJrxoAga"
	phoneNo := "+6285600070411"
	password := "cobacoba1-="
	phoneNoMd5 := util.GenerateMD5(salt, phoneNo)

	//embbeded on application
	// apiKey := "yKSie!V7JAi%2hi{QWwt$E0#uw0oN15[+fcEc'-^DbnZV-ynmM"
	passwordMd5 := util.GeneratePasswordHash(salt, password)
	println("phoneNoMd5", phoneNoMd5, "passwordMd5", passwordMd5)
	fullName := "Ari Prasetiyo"
	email := "ari.prase.id@gmail.com"
	emailHash := util.GenerateMD5(salt, email)
	var acl handlerAuth.ACL_ENUM
	acl = handlerAuth.ADMIN_SUPER
	println(generateSQLUserAuth(userId, passwordMd5, true, fullName, email, emailHash, phoneNo, phoneNoMd5, acl))
}

func generateSQLUserAuth(userId string, passwordMd5 string, isActive bool, fullname string, email string, emailHash string, phoneNo string, phoneNoHash string, acl handlerAuth.ACL_ENUM) string {
	return "insert into auth_users (user_id, password_hash, is_active, is_phone_number, is_email,  full_name, email, email_hash, phone_no, phone_no_hash, acl ) values ('" + userId + "','" + passwordMd5 + "'," + strconv.FormatBool(isActive) + ", true, true,'" + fullname + "','" + email + "','" + emailHash + "','" + phoneNo + "','" + phoneNoHash + "','" + *acl.String() + "')"
}

const letterBytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"

func generateUserId(n int) string {
	rand.Seed(time.Now().UnixNano())
	b := make([]byte, n)
	for i := range b {
		b[i] = letterBytes[rand.Intn(len(letterBytes))]
	}
	return string(b)
}
